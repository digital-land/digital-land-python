import pytest

from csv import DictReader

from digital_land.commands import dataset_create, dataset_dump


@pytest.mark.skip("data needs updating")
@pytest.mark.parametrize(
    "dataset_name",
    [
        "listed-building-grade",
        "listed-building-outline",
        "locally-listed-building",
    ],
)
def test_package_dataset(
    # Parametrize args
    dataset_name,
    # Static runtime filesystem dependencies
    column_field_dir,
    dataset_resource_dir,
    organisation_path,
    # Runtime filesystem dependencies generated by previous steps
    transformed_dir,
    pipeline_dir,
    # Test assertion directories
    dataset_dir,
    # Pytest fixtures
    tmp_path,
):
    # Setup
    expected_csv_result = dataset_dir.joinpath(f"{dataset_name}.csv")

    input_paths = [
        str(transformed_path)
        for transformed_path in transformed_dir.joinpath(dataset_name).iterdir()
    ]

    output_dir = tmp_path.joinpath("dataset_output")
    output_dir.mkdir()
    sqlite_path = output_dir.joinpath(f"{dataset_name}.sqlite3")
    csv_path = output_dir.joinpath(f"{dataset_name}.csv")

    dataset_create(input_paths, sqlite_path, organisation_path)
    dataset_dump(sqlite_path, csv_path)

    # Assert
    with csv_path.open() as actual, expected_csv_result.open() as expected:
        actual_dict_reader = DictReader(actual)
        expected_dict_reader = DictReader(expected)
        assert actual_dict_reader.fieldnames == expected_dict_reader.fieldnames
        assert list(actual_dict_reader) == list(expected_dict_reader)
