from csv import DictReader
from pathlib import Path
from shutil import copytree

import pytest

from digital_land.api import DigitalLandApi
from digital_land.specification import specification_path


# Read-only fixtures
@pytest.fixture
def organisation_path(data_dir):
    return data_dir.joinpath("organisation.csv")


@pytest.fixture
def data_dir():
    return Path(__file__).parent.parent.joinpath("data").joinpath("listed-building")


# Copied fixtures
@pytest.fixture
def transformed_dir(data_dir, tmp_path):
    transformed_dir = tmp_path.joinpath("transformed")
    copytree(
        data_dir.joinpath("transformed"),
        transformed_dir,
    )
    return transformed_dir


@pytest.fixture
def dataset_dir(data_dir, tmp_path):
    dataset_dir = tmp_path.joinpath("dataset")
    copytree(
        data_dir.joinpath("dataset"),
        dataset_dir,
    )
    return dataset_dir


@pytest.fixture
def column_field_dir(data_dir, tmp_path):
    column_field_dir = tmp_path.joinpath("var").joinpath("column-field")
    copytree(
        data_dir.joinpath("var").joinpath("column-field"),
        column_field_dir,
        dirs_exist_ok=True,
    )
    return column_field_dir


@pytest.fixture
def dataset_resource_dir(data_dir, tmp_path):
    column_field_dir = tmp_path.joinpath("var").joinpath("dataset-resource")
    copytree(
        data_dir.joinpath("var").joinpath("dataset-resource"),
        column_field_dir,
        dirs_exist_ok=True,
    )
    return column_field_dir


@pytest.fixture
def pipeline_dir(data_dir, tmp_path):
    pipeline_dir = tmp_path.joinpath("pipeline")
    copytree(
        data_dir.joinpath("pipeline"),
        pipeline_dir,
        dirs_exist_ok=True,
    )
    return pipeline_dir


@pytest.mark.parametrize(
    "dataset_name",
    [
        "listed-building-grade",
        "listed-building-outline",
        "locally-listed-building",
    ],
)
def test_package_dataset(
    # Parametrize args
    dataset_name,
    # Static runtime filesystem dependencies
    column_field_dir,
    dataset_resource_dir,
    organisation_path,
    # Runtime filesystem dependencies generated by previous steps
    transformed_dir,
    pipeline_dir,
    # Test assertion directories
    dataset_dir,
    # Pytest fixtures
    tmp_path,
):
    # Setup
    expected_csv_result = dataset_dir.joinpath(f"{dataset_name}.csv")
    expected_hoisted_csv_result = dataset_dir.joinpath(f"{dataset_name}-hoisted.csv")

    input_paths = [
        str(transformed_path)
        for transformed_path in transformed_dir.joinpath(dataset_name).iterdir()
    ]

    output_dir = tmp_path.joinpath("dataset_output")
    output_dir.mkdir()
    sqlite_path = output_dir.joinpath(f"{dataset_name}.sqlite3")
    csv_path = output_dir.joinpath(f"{dataset_name}.csv")
    hoisted_csv_path = output_dir.joinpath(f"{dataset_name}-hoisted.csv")

    # Call
    api = DigitalLandApi(
        debug=False,
        dataset=dataset_name,
        pipeline_dir=pipeline_dir,
        specification_dir=str(specification_path),
        tmp_dir_path=str(tmp_path),
    )
    api.dataset_create_cmd(input_paths, sqlite_path, organisation_path)
    api.dataset_dump_cmd(sqlite_path, csv_path)
    api.dataset_dump_hoisted_cmd(sqlite_path, csv_path, hoisted_csv_path)

    # Assert
    with csv_path.open() as actual, expected_csv_result.open() as expected:
        actual_dict_list = list(DictReader(actual))
        expected_dict_list = list(DictReader(expected))
        assert actual_dict_list == expected_dict_list

    with hoisted_csv_path.open() as actual, expected_hoisted_csv_result.open() as expected:
        actual_dict_list = list(DictReader(actual))
        expected_dict_list = list(DictReader(expected))
        assert actual_dict_list == expected_dict_list
