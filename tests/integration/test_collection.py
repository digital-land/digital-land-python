#!/usr/bin/env -S pytest -svv
from csv import DictReader

from digital_land.commands import collection_save_csv


def _get_filename_without_suffix_from_path(path):
    return path.name[: -len("".join(path.suffixes))]


def test_collection(
    # Runtime filesystem dependencies generated by previous steps
    pipeline_dir,
    # Static runtime filesystem dependencies
    collection_resources_dir,
    collection_metadata_dir,
    collection_payload_dir,
    # Blank output directories
    collection_dir,
    # Test assertion directories
    populated_collection_dir_results,
    # Pytest fixtures
    tmp_path,
):
    collection_save_csv(collection_dir)

    # Assert
    actual_log_csv = collection_dir.joinpath("log.csv")
    actual_resource_csv = collection_dir.joinpath("resource.csv")
    expected_resource_csv = populated_collection_dir_results.joinpath("resource.csv")
    expected_log_csv = populated_collection_dir_results.joinpath("log.csv")
    with actual_log_csv.open() as log_file:
        log_csv = DictReader(log_file)
        logs = list(log_csv)
        assert {log["endpoint"] for log in logs} == set(
            _get_filename_without_suffix_from_path(path)
            for path in collection_payload_dir.iterdir()
        )

        with actual_resource_csv.open() as resource_file:
            resource_csv = DictReader(resource_file)
            assert {log["resource"] for log in logs} == {
                resource["resource"] for resource in resource_csv
            }

    with actual_log_csv.open() as actual, expected_log_csv.open() as expected:
        actual_dict_reader = DictReader(actual)
        expected_dict_reader = DictReader(expected)
        assert actual_dict_reader.fieldnames == expected_dict_reader.fieldnames
        assert list(actual_dict_reader) == list(expected_dict_reader)

    with actual_resource_csv.open() as actual, expected_resource_csv.open() as expected:
        actual_dict_reader = DictReader(actual)
        expected_dict_reader = DictReader(expected)
        assert actual_dict_reader.fieldnames == expected_dict_reader.fieldnames
        assert list(actual_dict_reader) == list(expected_dict_reader)
