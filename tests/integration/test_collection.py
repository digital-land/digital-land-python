from csv import DictReader

import pytest

from digital_land.api import DigitalLandApi
from digital_land.specification import specification_path


def _get_filename_without_suffix_from_path(path):
    return path.name[: -len("".join(path.suffixes))]


@pytest.mark.parametrize(
    "dataset_name",
    [
        "listed-building-grade",
        "listed-building-outline",
        "locally-listed-building",
    ],
)
def test_collection(
    # Parametrize args
    dataset_name,
    # Runtime filesystem dependencies generated by previous steps
    pipeline_dir,
    # Static runtime filesystem dependencies
    collection_resources_dir,
    collection_metadata_dir,
    collection_payload_dir,
    # Blank output directories
    collection_dir,
    # Pytest fixtures
    tmp_path,
):

    # Call
    api = DigitalLandApi(
        debug=False,
        dataset=dataset_name,
        pipeline_dir=pipeline_dir,
        specification_dir=str(specification_path),
    )
    # Call
    api.collection_save_csv_cmd(collection_dir)

    # Assert
    with open(collection_dir.joinpath("log.csv")) as log_file:
        log_csv = DictReader(log_file)
        logs = list(log_csv)
        assert {log["endpoint"] for log in logs} == set(
            _get_filename_without_suffix_from_path(path)
            for path in collection_payload_dir.iterdir()
        )

        with open(collection_dir.joinpath("resource.csv")) as resource_file:
            resource_csv = DictReader(resource_file)
            assert {log["resource"] for log in logs} == {
                resource["resource"] for resource in resource_csv
            }
