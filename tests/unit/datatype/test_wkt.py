import shapely.wkt
from shapely.validation import explain_validity
import pytest

from digital_land.datatype.wkt import WktDataType
from digital_land.log import IssueLog


def test_normalise_returns_valid_shape():
    input_wkt = "MULTIPOLYGON (((460316.9266 298735.6545,460316.9266 298731.3933,460311.2699 298731.127,460311.9181 298731.223,460304.7879 298735.6593,460304.7854 298735.6545,460316.9266 298735.6545)))"  # noqa: E501
    issue_log = IssueLog()
    output_wkt = WktDataType().normalise(input_wkt, issues=issue_log)
    output_geometry = shapely.wkt.loads(output_wkt)
    assert output_geometry.is_valid, explain_validity(output_geometry)


def test_normalise_returns_empty_geometry():
    input_wkt = "MULTIPOLYGON (((471419.04 240369.58,471418.996 240371.622,471419.0 240371.6,471419.04 240369.58)))"  # noqa: E501
    issue_log = IssueLog()
    output_wkt = WktDataType().normalise(input_wkt, issues=issue_log)
    assert output_wkt == ""


@pytest.mark.parametrize(
    "test_input,expected",
    [
        (
            "MultiPolygon (((-1.62066432 54.97038806, -1.62066759 54.97038101, -1.62066778 54.97038075, -1.6206681 54.97038055, -1.62066852 54.97038041, -1.62066898 54.97038034, -1.62066946 54.97038036, -1.62066958 54.97038038, -1.6206699 54.97038033, -1.62067041 54.97038035, -1.62069152 54.9703834, -1.62073905 54.97038995, -1.62073951 54.97039006, -1.62073989 54.97039025, -1.62074014 54.97039049, -1.62074025 54.97039077, -1.62074019 54.97039106, -1.62074018 54.97039108, -1.62074013 54.97039136, -1.62071673 54.97044112, -1.62083169 54.97045914, -1.62083213 54.97045925, -1.62083249 54.97045944, -1.62083274 54.97045968, -1.62083284 54.97045995, -1.62083279 54.97046023, -1.6208327 54.97046044, -1.62083266 54.97046064, -1.62080007 54.97053321, -1.62079997 54.97053334, -1.6207997 54.97053394, -1.620799 54.97053384, -1.62079864 54.97053388, -1.62079816 54.97053385, -1.62079659 54.97053361, -1.62079649 54.97053383, -1.62071552 54.97052117, -1.62067854 54.9705155, -1.62064044 54.97051041, -1.62050794 54.97049343, -1.62050751 54.97049333, -1.62050715 54.97049317, -1.6205035 54.97049096, -1.62050325 54.97049076, -1.6205031 54.97049053, -1.62050283 54.97048983, -1.62050135 54.97048941, -1.62050095 54.97048925, -1.62050066 54.97048902, -1.6205005 54.97048875, -1.62049608 54.97047376, -1.6204961 54.9704734, -1.6205112 54.97043666, -1.62053771 54.97037092, -1.6205379 54.97037066, -1.62053822 54.97037044, -1.62053864 54.97037029, -1.62053912 54.97037023, -1.62053961 54.97037025, -1.62066432 54.97038806),(-1.62051009 54.97049186, -1.62050862 54.97049145, -1.62050909 54.97049173, -1.62051009 54.97049186),(-1.62054069 54.97037274, -1.62051439 54.97043672, -1.6204997 54.97047314, -1.62050556 54.97048859, -1.6205188 54.9704923, -1.62064122 54.97050866, -1.6206756 54.97051307, -1.62067567 54.97051308, -1.62071721 54.97051957, -1.6207974 54.97053187, -1.6208292 54.97046104, -1.6207137 54.97044331, -1.62071326 54.97044319, -1.62071289 54.970443, -1.62071265 54.97044276, -1.62071255 54.97044248, -1.6207126 54.9704422, -1.62073661 54.97039177, -1.62069107 54.97038519, -1.62067122 54.97038246, -1.6206689 54.97038958, -1.62066872 54.97038986, -1.62066841 54.97039008, -1.62066798 54.97039024, -1.62066749 54.97039031, -1.62066698 54.97039029, -1.62066651 54.97039022, -1.62066643 54.97039033, -1.6206661 54.97039054, -1.62066569 54.97039068, -1.62066521 54.97039074, -1.62066473 54.97039071, -1.62054069 54.97037274)))",  # noqa: E501
            "MULTIPOLYGON (((-1.620664 54.970388,-1.620540 54.970370,-1.620539 54.970370,-1.620539 54.970370,-1.620538 54.970370,-1.620538 54.970371,-1.620538 54.970371,-1.620511 54.970437,-1.620496 54.970473,-1.620496 54.970474,-1.620500 54.970489,-1.620501 54.970489,-1.620501 54.970489,-1.620501 54.970489,-1.620503 54.970490,-1.620503 54.970491,-1.620503 54.970491,-1.620504 54.970491,-1.620507 54.970493,-1.620508 54.970493,-1.620508 54.970493,-1.620640 54.970510,-1.620679 54.970515,-1.620716 54.970521,-1.620796 54.970534,-1.620797 54.970534,-1.620798 54.970534,-1.620799 54.970534,-1.620799 54.970534,-1.620800 54.970534,-1.620800 54.970533,-1.620800 54.970533,-1.620833 54.970461,-1.620833 54.970460,-1.620833 54.970460,-1.620833 54.970460,-1.620833 54.970460,-1.620832 54.970459,-1.620832 54.970459,-1.620832 54.970459,-1.620717 54.970441,-1.620740 54.970391,-1.620740 54.970391,-1.620740 54.970391,-1.620740 54.970391,-1.620740 54.970390,-1.620740 54.970390,-1.620740 54.970390,-1.620739 54.970390,-1.620692 54.970383,-1.620670 54.970380,-1.620670 54.970380,-1.620670 54.970380,-1.620669 54.970380,-1.620669 54.970380,-1.620669 54.970380,-1.620668 54.970381,-1.620668 54.970381,-1.620668 54.970381,-1.620664 54.970388),(-1.620510 54.970492,-1.620509 54.970492,-1.620509 54.970491,-1.620510 54.970492),(-1.620541 54.970373,-1.620665 54.970391,-1.620665 54.970391,-1.620666 54.970391,-1.620666 54.970391,-1.620666 54.970390,-1.620667 54.970390,-1.620667 54.970390,-1.620667 54.970390,-1.620668 54.970390,-1.620668 54.970390,-1.620669 54.970390,-1.620669 54.970390,-1.620671 54.970382,-1.620691 54.970385,-1.620737 54.970392,-1.620713 54.970442,-1.620713 54.970442,-1.620713 54.970443,-1.620713 54.970443,-1.620713 54.970443,-1.620714 54.970443,-1.620829 54.970461,-1.620797 54.970532,-1.620717 54.970520,-1.620676 54.970513,-1.620676 54.970513,-1.620641 54.970509,-1.620519 54.970492,-1.620506 54.970489,-1.620500 54.970473,-1.620514 54.970437,-1.620541 54.970373)))",  # noqa: E501
        )
    ],
)
def test_normalise_returns_specific_result(test_input, expected):
    """
    These tests aren't perfect but allow us too ensure specific results are achieved they are more fragile than I would like
    We should aim to refactor code to better test these cases with more general properties e.g. holes remain or validity other than their raw wkt output
    """
    issue_log = IssueLog()
    output_wkt = WktDataType().normalise(test_input, issues=issue_log)
    assert output_wkt == expected
