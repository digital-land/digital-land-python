import shapely.wkt
from shapely.validation import explain_validity
import pytest

from digital_land.datatype.wkt import WktDataType
from digital_land.log import IssueLog


def test_normalise_returns_valid_shape():
    input_wkt = "MULTIPOLYGON (((460316.9266 298735.6545,460316.9266 298731.3933,460311.2699 298731.127,460311.9181 298731.223,460304.7879 298735.6593,460304.7854 298735.6545,460316.9266 298735.6545)))"  # noqa: E501
    issue_log = IssueLog()
    output_wkt = WktDataType().normalise(input_wkt, issues=issue_log)
    output_geometry = shapely.wkt.loads(output_wkt)
    assert output_geometry.is_valid, explain_validity(output_geometry)


def test_normalise_returns_empty_geometry():
    input_wkt = "MULTIPOLYGON (((471419.04 240369.58,471418.996 240371.622,471419.0 240371.6,471419.04 240369.58)))"  # noqa: E501
    issue_log = IssueLog()
    output_wkt = WktDataType().normalise(input_wkt, issues=issue_log)
    assert output_wkt == ""


@pytest.mark.parametrize(
    "input_wkt",
    [
        "MultiPolygon (((-1.62066432 54.97038806, -1.62066759 54.97038101, -1.62066778 54.97038075, -1.6206681 54.97038055, -1.62066852 54.97038041, -1.62066898 54.97038034, -1.62066946 54.97038036, -1.62066958 54.97038038, -1.6206699 54.97038033, -1.62067041 54.97038035, -1.62069152 54.9703834, -1.62073905 54.97038995, -1.62073951 54.97039006, -1.62073989 54.97039025, -1.62074014 54.97039049, -1.62074025 54.97039077, -1.62074019 54.97039106, -1.62074018 54.97039108, -1.62074013 54.97039136, -1.62071673 54.97044112, -1.62083169 54.97045914, -1.62083213 54.97045925, -1.62083249 54.97045944, -1.62083274 54.97045968, -1.62083284 54.97045995, -1.62083279 54.97046023, -1.6208327 54.97046044, -1.62083266 54.97046064, -1.62080007 54.97053321, -1.62079997 54.97053334, -1.6207997 54.97053394, -1.620799 54.97053384, -1.62079864 54.97053388, -1.62079816 54.97053385, -1.62079659 54.97053361, -1.62079649 54.97053383, -1.62071552 54.97052117, -1.62067854 54.9705155, -1.62064044 54.97051041, -1.62050794 54.97049343, -1.62050751 54.97049333, -1.62050715 54.97049317, -1.6205035 54.97049096, -1.62050325 54.97049076, -1.6205031 54.97049053, -1.62050283 54.97048983, -1.62050135 54.97048941, -1.62050095 54.97048925, -1.62050066 54.97048902, -1.6205005 54.97048875, -1.62049608 54.97047376, -1.6204961 54.9704734, -1.6205112 54.97043666, -1.62053771 54.97037092, -1.6205379 54.97037066, -1.62053822 54.97037044, -1.62053864 54.97037029, -1.62053912 54.97037023, -1.62053961 54.97037025, -1.62066432 54.97038806),(-1.62051009 54.97049186, -1.62050862 54.97049145, -1.62050909 54.97049173, -1.62051009 54.97049186),(-1.62054069 54.97037274, -1.62051439 54.97043672, -1.6204997 54.97047314, -1.62050556 54.97048859, -1.6205188 54.9704923, -1.62064122 54.97050866, -1.6206756 54.97051307, -1.62067567 54.97051308, -1.62071721 54.97051957, -1.6207974 54.97053187, -1.6208292 54.97046104, -1.6207137 54.97044331, -1.62071326 54.97044319, -1.62071289 54.970443, -1.62071265 54.97044276, -1.62071255 54.97044248, -1.6207126 54.9704422, -1.62073661 54.97039177, -1.62069107 54.97038519, -1.62067122 54.97038246, -1.6206689 54.97038958, -1.62066872 54.97038986, -1.62066841 54.97039008, -1.62066798 54.97039024, -1.62066749 54.97039031, -1.62066698 54.97039029, -1.62066651 54.97039022, -1.62066643 54.97039033, -1.6206661 54.97039054, -1.62066569 54.97039068, -1.62066521 54.97039074, -1.62066473 54.97039071, -1.62054069 54.97037274)))",  # noqa: E501
    ],
)
def test_normalise_maintains_number_of_holes(input_wkt):
    # calculate number of holes in input
    input_geom = shapely.wkt.loads(input_wkt)
    input_count = 0
    for geom in input_geom.geoms:
        input_count += len(geom.interiors)
    #  get output_wkt
    issue_log = IssueLog()
    output_wkt = WktDataType().normalise(input_wkt, issues=issue_log)
    output_geom = shapely.wkt.loads(output_wkt)
    output_count = 0
    for geom in output_geom.geoms:
        output_count += len(geom.interiors)

    assert input_count == output_count


def test_normalise_geojson_provided():
    wkt = WktDataType()
    issues = IssueLog()

    value = (
        '{"type":"MultiPolygon","coordinates":[[[[-0.143512,51.558395], '
        "[-0.143592,51.558364],[-0.143665,51.558334],[-0.143677,51.558329], "
        "[-0.143698,51.558348],[-0.143702,51.558352],[-0.143686,51.558392],"
        "[-0.143673,51.558398],[-0.143658,51.558404],[-0.143558,51.558442],"
        "[-0.143512,51.558395],[-0.143512,51.558395]]]]}"
    )
    expected = "MULTIPOLYGON (((-0.143512 51.558395,-0.143558 51.558442,-0.143686 51.558392,-0.143702 51.558352,-0.143677 51.558329,-0.143512 51.558395)))"

    actual = wkt.normalise(value, issues=issues)
    assert actual == expected
    assert len(issues.rows) == 1, "more than 1 issues being generated"
    assert issues.rows[0]["issue-type"] == "invalid type geojson"


def test_normalise_geometrycollection_provided():
    wkt = WktDataType()
    issues = IssueLog()

    value = (
        "GEOMETRYCOLLECTION (MULTIPOLYGON (((-0.173644 51.549807, -0.173698 51.549808, -0.173711 51.549808, -0.173712 51.549804,"
        "-0.173779 51.549803, -0.173966 51.549796, -0.174 51.549795, -0.174008 51.549796, -0.174024 51.549799, -0.174024 51.549799,"
        "-0.174028 51.549803, -0.174031 51.549807, -0.174032 51.549812, -0.174034 51.549817, -0.174039 51.549828, -0.174041 51.549918,"
        "-0.174041 51.549928, -0.173963 51.549928, -0.17393 51.549928, -0.173877 51.54993, -0.173806 51.549933, -0.173724 51.549935,"
        "-0.173689 51.549976, -0.173645 51.549975, -0.17355 51.549971, -0.173554 51.549913, -0.173545 51.549912, -0.173545 51.549902,"
        "-0.173547 51.549872, -0.173551 51.549811, -0.173644 51.549807)),((-0.17679 51.555154, -0.176851 51.555112, -0.1769 51.555147,"
        "-0.176995 51.555106, -0.177028 51.555139, -0.177085 51.555194, -0.177041 51.555212, -0.177025 51.555233, -0.177006 51.555227,"
        "-0.176994 51.555231, -0.176991 51.55523, -0.176896 51.555199, -0.176884 51.555212, -0.176822 51.555174, -0.17679 51.555154,"
        "-0.17679 51.555154)),((-0.176757 51.552538, -0.176746 51.552526, -0.176662 51.552557, -0.176651 51.552562, -0.176627 51.552538,"
        "-0.176595 51.552506, -0.176707 51.552463, -0.176758 51.552515, -0.176793 51.552502, -0.176804 51.552519, -0.176757 51.552538,"
        "-0.176757 51.552538))))"
    )

    expected = (
        "MULTIPOLYGON (((-0.173644 51.549807,-0.173551 51.549811,-0.173545 51.549902,"
        "-0.173545 51.549912,-0.173554 51.549913,-0.173550 51.549971,-0.173689 51.549976,"
        "-0.173724 51.549935,-0.174041 51.549928,-0.174039 51.549828,-0.174024 51.549799,"
        "-0.173644 51.549807)),"
        "((-0.176790 51.555154,-0.176884 51.555212,-0.176896 51.555199,-0.176994 51.555231,"
        "-0.177025 51.555233,-0.177041 51.555212,-0.177085 51.555194,-0.176995 51.555106,"
        "-0.176900 51.555147,-0.176851 51.555112,-0.176790 51.555154)),"
        "((-0.176757 51.552538,-0.176804 51.552519,-0.176793 51.552502,-0.176758 51.552515,"
        "-0.176707 51.552463,-0.176595 51.552506,-0.176651 51.552562,-0.176746 51.552526,"
        "-0.176757 51.552538)))"
    )

    actual = wkt.normalise(value, issues=issues)
    assert actual == expected
    assert len(issues.rows) == 0
